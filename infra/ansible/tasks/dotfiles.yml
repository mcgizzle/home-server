- name: Clone dotfiles repository as a bare repository
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ cfg_dir }}"
    bare: yes
  ignore_errors: yes

- name: Attempt to checkout the dotfiles repository
  shell: "/usr/bin/git --git-dir={{ cfg_dir }} --work-tree={{ansible_facts.env.HOME }} checkout"
  register: checkout
  ignore_errors: yes
  changed_when: "'Checked out config.' in checkout.stdout"

- name: Backup existing dotfiles if checkout fails
  block:
    - name: Find files that would be overwritten by checkout
      shell: "/usr/bin/git --git-dir={{ cfg_dir }} --work-tree={{ansible_facts.env.HOME }} checkout 2>&1 | egrep '\\s+\\.' | awk '{print $1}'"
      register: files_to_backup
      ignore_errors: true

    - name: Create backup directory
      file:
        path: "{{ansible_facts.env.HOME }}/.config-backup"
        state: directory
      when: files_to_backup.stderr != ""

    - name: Move files to backup directory
      command: "mv {{ item }} {{ansible_facts.env.HOME }}/.config-backup/{{ item | basename }}"
      loop: "{{ files_to_backup.stderr_lines }}"
      loop_control:
        label: "{{ item }}"
      when: files_to_backup.stderr != ""
  when: checkout.rc != 0

- name: Retry checkout after moving conflicting files
  shell: "/usr/bin/git --git-dir={{ cfg_dir }} --work-tree={{ansible_facts.env.HOME }} checkout"
  when: checkout.rc != 0

- name: Set Git configuration to ignore untracked files
  shell: "/usr/bin/git --git-dir={{ cfg_dir }} --work-tree={{ansible_facts.env.HOME }} config status.showUntrackedFiles no"
